/*
Copyright Â© 2023 NAME HERE <EMAIL ADDRESS>
*/
package cmd

import (
	"fmt"
	"log"
	"os"
	"text/tabwriter"

	"github.com/go-resty/resty/v2"
	"github.com/spf13/cobra"

	"github.com/azrod/golink/models"
)

// listCmd represents the list command.
var listCmd = &cobra.Command{
	Use:   "list",
	Short: "List links",
	Long:  `List links`,
	Run: func(cmd *cobra.Command, args []string) {
		r, err := resty.New().
			SetBaseURL(apiURL).
			R().
			SetResult(&[]models.Link{}).
			Get("/api/v1/links")
		if err != nil {
			log.Default().Printf("Failed to list links: %s", err)
			return
		}

		if r.IsError() {
			log.Default().Printf("Failed to list links: %s", r.Error())
			return
		}

		switch globalFlagOutput {
		case globalFlagOutputShort:
			w := tabwriter.NewWriter(os.Stdout, 10, 1, 5, ' ', 0)
			fs := "%s\t%s\t%s\n"
			fmt.Fprintf(w, fs, "PATH", "TARGET URL", "STATUS")

			for _, l := range *r.Result().(*[]models.Link) {
				fmt.Fprintf(w, fs, l.SourcePath, l.TargetURL, l.Enabled.String())
			}

			w.Flush()

		case globalFlagOutputWide:
			w := tabwriter.NewWriter(os.Stdout, 10, 1, 5, ' ', 0)
			fs := "%s\t%s\t%s\t%s\t%s\t%s\n"
			fmt.Fprintf(w, fs, "PATH", "TARGET URL", "STATUS", "GROUP", "LABELS")

			for _, l := range *r.Result().(*[]models.Link) {
				fmt.Fprintf(w, fs, l.SourcePath, l.TargetURL, l.Enabled.String(), l.CreatedAt, l.UpdatedAt, l.GroupID, l.Labels)
			}

			w.Flush()
		}
	},
}

func init() {
	linkCmd.AddCommand(listCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// listCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	listCmd.Flags().StringP("--label-selector", "l", "", "Selector to filter by one or more labels (e.g. -l env:dev,app:demo).")
}
