name: Pre-Release

on:
  repository_dispatch:
    types: [prerelease]


permissions:
  contents: write
  packages: write

jobs:
  GolangCI-Lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.tag }}
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - run: go mod download
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
  release-notes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # v3.5.3 
        with:
          fetch-depth: 0
          ref: ${{ github.event.client_payload.tag }}
      - name: Generate Release Notes
        run: |
          export PREV_TAG=$(git tag --list 'v*' --sort=-version:refname | head -n 2 | tail -n 1)
          export PREV_VERSION=${PREV_TAG//v}
          echo "# :construction: Prerelease" > prerelease-notes.txt
          sed -n -e "1{/# /d;}" -e "2{/^$/d;}" -e "/# $PREV_VERSION/q;p" CHANGELOG.md >> prerelease-notes.txt
      - uses: actions/upload-artifact@v4
        with:
          name: prerelease-notes
          path: prerelease-notes.txt
          retention-days: 1
  release-app:
    runs-on: ubuntu-latest
    needs: [release-notes, GolangCI-Lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.client_payload.tag }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: release-notes-download
        name: Release Notes Download
        uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4.1.1
        with:
          name: prerelease-notes
          path: /tmp
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        if: success()
        with:
          distribution: goreleaser
          version: latest
          args: release --snapshot --clean -f .goreleaser-prerelease.yaml --release-notes=${{ steps.release-notes-download.outputs.download-path }}/prerelease-notes.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

