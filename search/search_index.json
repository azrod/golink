{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#overview","title":"Overview","text":"<p>Project is in early development.</p> <p>This project is in early development and is not yet ready for production use. You are welcome to try it out and provide feedback, but be aware that the API may change at any time.</p> <p>GoLink is a private shortlink service written in Go. It is designed to be simple to use and easy to deploy. GoLink are intuitive and easy to remember. A go link is a short keyword that can be entered directly into your browser\u2019s address bar to quickly access a resource. For example, you can create a go link called <code>go/grafana</code> that redirects to https://grafana.example.com or <code>go/myproject/git</code> that redirects to https://git.example.com/myproject.</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Simple and intuitive web interface</li> <li>Easy to deploy</li> <li>Easy to use</li> <li>Short and memorable links</li> <li>Redirect to any URL</li> </ul>"},{"location":"#concept","title":"Concept","text":""},{"location":"#list-of-components","title":"List of components","text":"<ul> <li><code>UI</code> is a simple web interface that allows users view and filter all available links. UI is written in vue.js and is served by GoLink server.</li> <li><code>API</code> is a REST API that allows users to create, update and delete links. API is written in Go and is served by GoLink server.</li> <li><code>Shortlink</code> is a short keyword that can be entered directly into your browser\u2019s address bar to quickly access a resource. This is the main concept of GoLink. Is written in Go and is served by GoLink server.</li> <li><code>glctl</code> is a command line tool that allows users to create, update and delete links. glctl is written in Go and available for Linux, MacOS and Windows.</li> <li><code>StorageBackend</code> is a storage backend that stores all links. GoLink supports actually only Redis as storage backend but in future will be supported more backends.</li> </ul>"},{"location":"#dashboard","title":"Dashboard","text":""},{"location":"#whos-it-for","title":"Who\u2019s it for?","text":"<p>GoLink is for anyone who wants to create short, memorable links to internal resources. It\u2019s especially useful for organizations that have a lot of internal services and want to make it easy for employees to access them.</p>"},{"location":"api/","title":"Getting Start","text":""},{"location":"api/#glapi-golink-api","title":"GLAPI (Golink API)","text":""},{"location":"api/#introduction","title":"Introduction","text":"<p>The Golink API (GLAPI) is a RESTful API that allows you to create, read, update, and delete links and namespaces. This API is used by the Golink CLI and the Golink ui.</p> <p>The API respects the OpenAPI 3.0 specification and is documented in the dedicated API documentation.</p>"},{"location":"api/#authentication","title":"Authentication","text":"<p>Authentication</p> <p>Currently, the API does not support authentication. This is a planned feature.</p>"},{"location":"api/api/","title":"Swagger","text":""},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#configuration","title":"Configuration","text":"<p>All configuration are available in the config file, environment variables, and command line flags.</p> <p>Is possible to use all of them together, the configuration precedence is the following:</p> <ol> <li>Command line flags</li> <li>Environment variables</li> <li>Config file</li> </ol>"},{"location":"configuration/#command-line-flags","title":"Command line flags","text":"<p>All configuration can be set via command line flags.</p> <p>Command line flags</p> <p>The following example shows the default command line flags.</p> <pre><code>golink \\\n    --app.address=\"localhost\" \\\n    --app.port=\"8081\" \\\n    --health.address=\"localhost\" \\\n    --health.port=\"8082\" \\\n    --storage.type=\"local\" \\\n    --storage.local.path=\"./\"\n</code></pre>"},{"location":"configuration/#environment-variables","title":"Environment variables","text":"<p>All configuration can be set via environment variables.</p> <p>Environment variables</p> <p>The following example shows the default environment variables.</p> <pre><code>export GOLINK_APP_ADDRESS=\"localhost\"\nexport GOLINK_APP_PORT=\"8081\"\nexport GOLINK_HEALTH_ADDRESS=\"localhost\"\nexport GOLINK_HEALTH_PORT=\"8082\"\nexport GOLINK_STORAGE_TYPE=\"local\"\nexport GOLINK_STORAGE_LOCAL_PATH=\"./\"\n</code></pre>"},{"location":"configuration/#config-file","title":"Config file","text":"<p>The config file are located in the following paths:</p> <ul> <li><code>/etc/golink/config.[yaml,json,hcl,toml,ini]</code></li> <li><code>./config.[yaml,json,hcl,toml,ini]</code></li> </ul> <p>A lot of formats are supported (JSON, TOML, YAML, HCL, INI).</p> <p>config.yaml</p> <p>The following example shows the default config file.</p> <pre><code>app:\n  address: localhost\n  port: 8081\nhealth:\n  address: localhost\n  port: 8082\nstorage:\n  type: local\n  local:\n    path: ./\n</code></pre>"},{"location":"configuration/#storage-configuration","title":"Storage configuration","text":"<p>See the Storage Backend section for more advanced configuration.</p>"},{"location":"deployment/docker-compose/","title":"Docker Compose","text":""},{"location":"deployment/docker-compose/#docker-compose","title":"Docker Compose","text":"<p>Docker Compose is a tool for defining and running multi-container Docker applications. It is a good choice for small deployments.</p>"},{"location":"deployment/docker-compose/#how-to-run","title":"How to run","text":"<ol> <li>Install Docker Compose. See the Docker Compose installation instructions.</li> <li> <p>Create a file named <code>docker-compose.yml</code> with the following content:</p> <pre><code>version: '3.7'\n\nservices:\n  golink:\n    image: ghcr.io/azrod/golink:latest\n    container_name: golink\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl -f http://localhost:8082 || exit 1\"]\n      timeout: 30s\n      interval: 1m\n      retries: 3\n    ports:\n      - \"127.0.0.1:8081:8081\"\n</code></pre> </li> <li> <p>Run the Golink server:</p> <pre><code>docker compose up -d\n</code></pre> </li> </ol>"},{"location":"deployment/docker/","title":"Docker","text":""},{"location":"deployment/docker/#docker-deployment","title":"Docker deployment","text":"<p>Run GoLink in a Docker container. This is the easiest way to get started with GoLink. See the backend configuration documentation and choose a storage backend.</p> <p>This example uses Redis as storage backend.</p> <pre><code>docker run -itd \\\n    --env \"SERVER_HOST=0.0.0.0\" \\ \n    --env \"DB_REDIS_ADDRESS=redis:6379\" \\ \n    -p 8081:8081 \\ \n    --name golink \\\n    --restart always \\ \n    ghcr.io/azrod/golink:latest\n</code></pre>"},{"location":"deployment/getting-start/","title":"Getting Start","text":""},{"location":"deployment/getting-start/#deployment","title":"Deployment","text":"<ul> <li>Docker</li> <li>Docker Compose</li> <li>Kubernetes</li> <li>Helm (coming soon)</li> <li>Manual</li> </ul>"},{"location":"deployment/getting-start/#how-to-run","title":"How to run","text":"<ol> <li>Choose a deployment method.</li> <li>Follow the instructions for installing glctl.</li> <li> <p>Use glctl to add a link:</p> <pre><code>glctl --host localhost:8081 add link MyApp /myapp https://myapp.example.com\n</code></pre> </li> <li> <p>Open the golink web ui in a browser:</p> <p>http://localhost:8081/u/</p> </li> <li> <p>Follow the link to MyApp:</p> <p>http://localhost:8081/myapp</p> </li> </ol> <p>Note</p> <p>Replace <code>localhost:8081</code> with the host and port for your Golink server.</p>"},{"location":"deployment/kubernetes/","title":"Kubernetes","text":""},{"location":"deployment/kubernetes/#kubernetes-deployment","title":"Kubernetes deployment","text":"<p>Run Golink in a Kubernetes cluster. Golink is stateless, so you can scale it horizontally if your use storage backend that supports it. See the backend configuration documentation and choose a storage backend.</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: golink\n  name: golink\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: golink\n  template:\n    metadata:\n      labels:\n        app: golink\n    spec:\n      containers:\n      - name: golink\n        image: ghcr.io/azrod/golink:latest\n        args:\n        - --storage.type=redis\n        - --storage.redis.address=redis.default.svc.cluster.local:6379\n        - --storage.redis.db=10\n        - --app.address=0.0.0.0\n        - --health.address=0.0.0.0\n        - --health.port=8082\n        env:\n        - name: GOLINK_STORAGE_REDIS_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: redis-auth\n              key: password\n        ports:\n        - containerPort: 8081\n        - name: healthcheck\n          containerPort: 8082\n          protocol: TCP\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: healthcheck\n          initialDelaySeconds: 3\n          periodSeconds: 3\n</code></pre>"},{"location":"deployment/manual/","title":"Manual","text":""},{"location":"deployment/manual/#manual-deployment","title":"Manual deployment","text":"<p>Manual deployment is a basic deployment method that is suitable for small deployments. It is also useful for testing and development. The binaries for the Golink server are available on the releases page.</p>"},{"location":"deployment/manual/#how-to-run","title":"How to run","text":"<ol> <li>Download the binary for your platform from the releases page.</li> <li> <p>Run the binary:</p> <pre><code>./golink\n</code></pre> </li> </ol>"},{"location":"glctl/concept/","title":"Concept","text":""},{"location":"glctl/concept/#concept","title":"Concept","text":"<p><code>glctl</code> uses the concept and logic of <code>kubectl</code> to manage golinks. The namespace is the basic unit of management. The namespace is a logical grouping of golinks. Golinks are stored in a namespace. A namespace can be used to group golinks by team, department, or any other logical grouping.</p> <p>Basic usage</p> getadddelete <p>This command is used to get the namespace list.</p> <pre><code>$&gt; glctl get namespace\nNAME          STATUS      LINKS\ndefault       Enabled     1\nmyproject     Enabled     4\n</code></pre> <p>This command is used to add a link to a namespace.</p> <pre><code>$&gt; glctl add link -n myproject demo /demo https://demo.example.com\n</code></pre> <p>This command is used to delete a link from a namespace.</p> <pre><code>$&gt; glctl delete link -n myproject demo\n</code></pre>"},{"location":"glctl/install/","title":"Install","text":""},{"location":"glctl/install/#installation","title":"Installation","text":""},{"location":"glctl/install/#automatic-installation","title":"Automatic installation","text":"<p>Follow the instructions below to install glctl (GoLink Command Line Tool).</p> <pre><code>curl -sSfL https://raw.githubusercontent.com/azrod/golink/main/scripts/install.sh | sudo sh\n</code></pre> <p>Note</p> <p>On Windows, you can run the above commands with Git Bash, which comes with Git for Windows.</p> <p>This will install glctl to <code>/usr/local/bin</code>. If you want to install to a different location use <code>-b</code> flag.</p> <pre><code>curl -sSfL https://raw.githubusercontent.com/azrod/golink/main/scripts/install.sh | sudo sh -b /usr/bin\n</code></pre>"},{"location":"glctl/install/#manual-installation","title":"Manual installation","text":"<p>Download the latest release from GitHub Releases and extract the binary to a directory in your <code>PATH</code>.</p>"},{"location":"glctl/install/#install-from-source","title":"Install from source","text":"<p>Go 1.21 or later is required to install <code>glctl</code> from source.</p> <pre><code>go install github.com/azrod/golink/cmd/glctl@latest\n</code></pre>"},{"location":"glctl/usage/","title":"Usage","text":""},{"location":"glctl/usage/#how-to-use","title":"How to use","text":"<pre><code>glctl is a CLI for golink. It allows you to manage golink from the command line.\n\nUsage:\n  glctl [command]\n\nGoLink Commands\n  add         Add commands\n  delete      Delete commands\n  get         Get commands\n\nOther Commands\n  version     Returns the version of the application\n\nAdditional Commands:\n  completion  Generate the autocompletion script for the specified shell\n  help        Help about any command\n\nFlags:\n      --config string      config file (default is $HOME/.golink/config.yaml)\n      --debug              debug mode\n  -h, --help               help for glctl\n      --host string        golink host (default \"http://localhost:8081\")\n  -n, --namespace string   namespace (default \"default\")\n  -o, --output string      output format (default \"short\")\n      --timeout int        timeout in seconds (default 10)\n\nUse \"glctl [command] --help\" for more information about a command.\n</code></pre>"},{"location":"glctl/usage/#how-to-configure","title":"How to configure","text":"<p><code>glctl</code> uses a configuration file looking for <code>$HOME/.golink/config.yaml</code> by default. You can specify a different configuration file with the <code>--config</code> flag.</p> <p>If you don't have a configuration file, it will be created automatically when you run the <code>glctl</code> command for the first time.</p> <p>Default configuration file:</p> <pre><code>debug: false\nhost: http://localhost:8081\nnamespace: default\ntimeout: 10\n</code></pre>"},{"location":"glctl/commands/go/","title":"go","text":""},{"location":"glctl/commands/go/#go","title":"go","text":"<p><code>go</code> command is used to open from a terminal the target URL.</p>"},{"location":"glctl/commands/go/#demo","title":"Demo","text":""},{"location":"glctl/commands/go/#usages","title":"Usages","text":"<p>Link in default namespace:</p> <pre><code>$&gt; glctl go demo\n</code></pre> <p>Link in specified namespace:</p> <pre><code>$&gt; glctl go mynamespace/demo\n</code></pre>"},{"location":"glctl/commands/link/","title":"link","text":""},{"location":"glctl/commands/link/#link","title":"link","text":"<p>Link refers to the mapping between a golink and a URL. The golink is the key and the URL is the value.</p>"},{"location":"glctl/commands/link/#usages","title":"Usages","text":""},{"location":"glctl/commands/link/#get-link-list","title":"Get link list","text":"<p>Namespace</p> <p>If <code>--namespace | -n</code> is not specified, the <code>default</code> namespace is used.</p> <pre><code>$&gt; glctl get link\nNAMESPACE     NAME        PATH         TARGET URL                      STATUS\ndefault       grafana     /grafana     https://grafana.example.com     Enabled\ndefault       prometheus  /prometheus  https://prometheus.example.com  Enabled\n</code></pre>"},{"location":"glctl/commands/link/#add-link","title":"Add link","text":"<p>Unique path</p> <p>The path must be unique in the namespace.</p> <pre><code>$&gt; glctl add link demo /demo https://demo.example.com\n</code></pre>"},{"location":"glctl/commands/link/#delete-link","title":"Delete link","text":"<pre><code>$&gt; glctl delete link demo\n</code></pre>"},{"location":"glctl/commands/link/#aliases","title":"Aliases","text":"<p>The <code>li</code> alias is available for <code>link</code>.</p> <pre><code>$&gt; glctl get li\nNAMESPACE     NAME        PATH         TARGET URL                      STATUS\ndefault       grafana     /grafana     https://grafana.example.com     Enabled\ndefault       prometheus  /prometheus  https://prometheus.example.com  Enabled\n</code></pre>"},{"location":"glctl/commands/link/#help","title":"Help","text":"<p>The <code>--help</code> flag is available for <code>link</code>.</p> <pre><code>$&gt; glctl get|add|delete link -h\n</code></pre>"},{"location":"glctl/commands/namespace/","title":"namespace","text":""},{"location":"glctl/commands/namespace/#namespace","title":"Namespace","text":"<p>A namespace is a logical grouping of golinks. Golinks are stored in a namespace. A namespace can be used to group golinks by team, department, or any other logical grouping.</p>"},{"location":"glctl/commands/namespace/#usages","title":"Usages","text":""},{"location":"glctl/commands/namespace/#get-namespace-list","title":"Get namespace list","text":"<pre><code>$&gt; glctl get namespace\nNAME          STATUS      LINKS\ndefault       Enabled     1\nmyproject     Enabled     4\n</code></pre>"},{"location":"glctl/commands/namespace/#add-namespace","title":"Add namespace","text":"<pre><code>$&gt; glctl add namespace myproject\n</code></pre>"},{"location":"glctl/commands/namespace/#delete-namespace","title":"Delete namespace","text":"<pre><code>$&gt; glctl delete namespace myproject\n</code></pre> <p>Delete namespace does not delete links</p> <p>Deleting a namespace is impossible if there are links in the namespace. Use <code>--force</code> to delete the namespace and all links in the namespace.</p>"},{"location":"glctl/commands/namespace/#aliases","title":"Aliases","text":"<p>The <code>ns</code> alias is available for <code>namespace</code>.</p> <pre><code>$&gt; glctl get ns\nNAME          STATUS      LINKS\ndefault       Enabled     1\nmyproject     Enabled     4\n</code></pre>"},{"location":"glctl/commands/namespace/#help","title":"Help","text":"<p>The <code>--help</code> flag is available for <code>namespace</code>.</p> <pre><code>$&gt; glctl get|add|delete namespace -h\n</code></pre>"},{"location":"glctl/commands/update/","title":"update","text":""},{"location":"glctl/commands/update/#update","title":"Update","text":"<p>glctl supports updating itself. The update command will check for a new version and update itself if a new version is available.</p>"},{"location":"glctl/commands/update/#usages","title":"Usages","text":""},{"location":"glctl/commands/update/#update-glctl","title":"Update glctl","text":"<pre><code>$&gt; glctl update\nSuccessfully updated to version x.x.x\n</code></pre>"},{"location":"glctl/commands/version/","title":"version","text":""},{"location":"glctl/commands/version/#version","title":"Version","text":"<p>A version command returns the version of glctl and the version of the golink server.</p>"},{"location":"glctl/commands/version/#usages","title":"Usages","text":""},{"location":"glctl/commands/version/#get-version","title":"Get version","text":"<pre><code>$&gt; glctl get version\nClient informations:\n  Version: x.x.x\n  Commit: Commit hash\n  Build Date: 1970-01-01T00:00:00Z\n\nServer informations:\n  Version: x.x.x\n</code></pre> <p>The server version is only available if the server is reachable</p> <p>If the server is not reachable, only the client version is displayed.</p>"},{"location":"glctl/completions/bash/","title":"Bash","text":""},{"location":"glctl/completions/bash/#bash-completion","title":"Bash completion","text":"<p><code>glctl</code> supports bash completion for commands and flags. This script depends on the 'bash-completion' package. If it is not installed already, you can install it via your OS's package manager.</p> <p>To load completions in your current shell session</p> <pre><code>source &lt;(glctl completion bash)\n</code></pre> <p>To load completions for every new session</p> <p>You will need to start a new shell for this setup to take effect.</p> LinuxmacOS <pre><code>glctl completion bash &gt; /etc/bash_completion.d/glctl\n</code></pre> <pre><code>glctl completion bash &gt; $(brew --prefix)/etc/bash_completion.d/glctl\n</code></pre>"},{"location":"glctl/completions/fish/","title":"Fish","text":""},{"location":"glctl/completions/fish/#fish-completion","title":"Fish completion","text":"<p><code>glctl</code> supports fish completion for commands and flags.</p> <p>To load completions in your current shell session</p> <pre><code>glctl completion fish | source\n</code></pre> <p>To load completions for every new session</p> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>glctl completion fish &gt; ~/.config/fish/completions/glctl.fish\n</code></pre>"},{"location":"glctl/completions/powershell/","title":"PowerShell","text":""},{"location":"glctl/completions/powershell/#powershell-completion","title":"Powershell completion","text":"<p><code>glctl</code> supports powershell completion for commands and flags.</p> <p>To load completions in your current shell session</p> <pre><code>glctl completion powershell | Out-String | Invoke-Expression\n</code></pre> <p>Info</p> <p>To load completions for every new session, add the output of the above command to your powershell profile.</p>"},{"location":"glctl/completions/zsh/","title":"Zsh","text":""},{"location":"glctl/completions/zsh/#zsh-completion","title":"Zsh completion","text":"<p><code>glctl</code> supports zsh completion for commands and flags. If shell completion is not already enabled in your environment you will need to enable it.</p> <p>You can execute the following once:</p> <pre><code>echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n</code></pre> <p>To load completions in your current shell session</p> <pre><code>source &lt;(glctl completion zsh)\n</code></pre> <p>To load completions for every new session</p> <p>You will need to start a new shell for this setup to take effect.</p> LinuxmacOS <pre><code>glctl completion zsh &gt; \"${fpath[1]}/_glctl\"\n</code></pre> <pre><code>glctl completion zsh &gt; $(brew --prefix)/share/zsh/site-functions/_glctl\n</code></pre>"},{"location":"storage/","title":"Getting Start","text":""},{"location":"storage/#storage-backend","title":"Storage backend","text":"<p>The golink server has a pluggable storage backend. The storage backend is responsible for storing and retrieving the golinks.</p>"},{"location":"storage/#list-of-storage-backends","title":"List of storage backends","text":"<ul> <li>Local (default)</li> <li>Redis</li> </ul>"},{"location":"storage/#configuration","title":"Configuration","text":"<p>Set configuration of the storage backend</p> YAMLFlagEnvironment variable <pre><code>storage:\n  type: local\n</code></pre> <pre><code>--storage.type=local\n</code></pre> <pre><code>export GOLINK_STORAGE_TYPE=local\n</code></pre>"},{"location":"storage/local/","title":"Local Filesystem","text":""},{"location":"storage/local/#local-storage-backend","title":"Local storage backend","text":"<p>Use the local filesystem as the storage backend for Golink. Golink persists the data in the local filesystem. This is the default storage backend.</p> <p>Not recommended for production</p> <p>The local storage backend is not recommended for production. It is recommended to use a storage backend that can be shared across multiple instances of the Golink server.</p>"},{"location":"storage/local/#configuration","title":"Configuration","text":"<p>The default configuration for the local storage backend is:</p> <pre><code>storage:\n  type: local\n  local:\n    path: ./\n</code></pre> <p>Set configuration of the local storage backend</p> YAMLFlagEnvironment variable <pre><code>storage:\n  type: local\n  local:\n    path: /data/golink\n</code></pre> <pre><code>--storage.type=local\n--storage.local.path=/data/golink\n</code></pre> <pre><code>export GOLINK_STORAGE_TYPE=local\nexport GOLINK_STORAGE_LOCAL_PATH=/data/golink\n</code></pre>"},{"location":"storage/redis/","title":"Redis","text":""},{"location":"storage/redis/#redis-storage-backend","title":"Redis storage backend","text":"<p>Use Redis as the storage backend for Golink. Golink persists the data in Redis, so that it can be used across multiple instances of the Golink server.</p>"},{"location":"storage/redis/#configuration","title":"Configuration","text":"<p>The default configuration for the Redis storage backend is:</p> <pre><code>  redis:\n    address: localhost:6379\n    database: 0\n    max_retries: 3\n    dial_timeout: 5\n    read_timeout: 3\n    write_timeout: 3\n</code></pre> <p>Set configuration of the Redis storage backend</p> YAMLFlagEnvironment variable <pre><code>storage:\n  type: redis\n  redis:\n    address: localhost:6379\n    username: \"\"\n    password: \"\"\n    database: 0\n    max_retries: 3\n    dial_timeout: 5\n    read_timeout: 3\n    write_timeout: 3\n</code></pre> <pre><code>--storage.type=redis\n--storage.redis.address=localhost:6379\n--storage.redis.username=\"\"\n--storage.redis.password=\"\"\n--storage.redis.database=0\n--storage.redis.max.retries=3\n--storage.redis.dial.timeout=5s\n--storage.redis.read.timeout=3s\n--storage.redis.write.timeout=3s\n</code></pre> <pre><code>export GOLINK_STORAGE_TYPE=redis\nexport GOLINK_STORAGE_REDIS_ADDRESS=localhost:6379\nexport GOLINK_STORAGE_REDIS_USERNAME=\"\"\nexport GOLINK_STORAGE_REDIS_PASSWORD=\"\"\nexport GOLINK_STORAGE_REDIS_DATABASE=0\nexport GOLINK_STORAGE_REDIS_MAX_RETRIES=3\nexport GOLINK_STORAGE_REDIS_DIAL_TIMEOUT=5s\nexport GOLINK_STORAGE_REDIS_READ_TIMEOUT=3s\nexport GOLINK_STORAGE_REDIS_WRITE_TIMEOUT=3s\n</code></pre>"},{"location":"storage/redis/#example","title":"Example","text":"<p>To use Redis as the storage backend for Golink, you can run a Redis server in a Docker container and then run the Golink server in a Docker container. The following example shows how to do this.</p> <ol> <li> <p>Create a directory for the Redis server:</p> <pre><code>mkdir -p ~/redis/data\n</code></pre> </li> <li> <p>Create a file named <code>docker-compose.yml</code> with the following content:</p> <pre><code>version: '3.7'\n\nservices:\n  redis:\n    image: redis:latest\n    container_name: redis\n    volumes:\n      - ~/redis/data:/data\n  golink:\n    image: ghcr.io/azrod/golink:latest\n    container_name: golink\n    environment:\n      GOLINK_STORAGE_TYPE=redis\n      GOLINK_STORAGE_REDIS_ADDRESS=redis:6379\n    ports:\n      - \"8081:8081\"\n</code></pre> </li> <li> <p>Run the Redis and Golink server:</p> <pre><code>docker-compose up -d\n</code></pre> </li> <li> <p>Use glctl to add a golink:</p> <pre><code>glctl --host localhost:8081 add link MyApp /myapp https://myapp.example.com\n</code></pre> </li> <li> <p>Open the golink web ui in a browser:</p> <p>http://localhost:8081/u/</p> </li> <li> <p>Follow the link to MyApp:</p> <p>http://localhost:8081/myapp</p> </li> </ol>"}]}